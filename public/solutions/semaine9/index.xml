<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Atelier 9 :: 420-ZG4-MO LINUX</title>
    <link>http://localhost:1313/solutions/semaine9/index.html</link>
    <description>Solution des exercices Exercices 1 Solution 1: Paramètres entrés sur la ligne de commande #!/bin/bash # Vérification que trois paramètres sont fournis if [ $# -ne 3 ]; then exit 1 fi # Détermination du plus grand et du plus petit if [ $1 -gt $2 ]; then paramPlusGrand=$1 paramPlusPetit=$2 else paramPlusGrand=$2 paramPlusPetit=$1 fi # Division entière et calcul final resultat=$(( (paramPlusGrand / paramPlusPetit) * $3 )) # Affichage du résultat echo &#34;L&#39;expression ($paramPlusGrand / $paramPlusPetit) * $3 donne : $resultat&#34;&#xD;Explications : if [ $# -ne 3 ]: Vérifie que trois paramètres sont fournis. paramPlusGrand et paramPlusPetit sont déterminés avec une simple condition. La division entière est effectuée avec /. L’opérateur * réalise la multiplication. Exemple d’exécution : $ bash param3.sh 5 10 3 L&#39;expression (10 / 5) * 3 donne : 6&#xD;Solution 2: Paramètres entrés par l’utilisateur #!/bin/bash # Saisie des paramètres par l&#39;utilisateur read -p &#34;Entrez le premier nombre : &#34; param1 read -p &#34;Entrez le deuxième nombre : &#34; param2 read -p &#34;Entrez le troisième nombre : &#34; param3 # Détermination du plus grand et du plus petit if [ $param1 -gt $param2 ]; then paramPlusGrand=$param1 paramPlusPetit=$param2 else paramPlusGrand=$param2 paramPlusPetit=$param1 fi # Division entière et calcul final resultat=$(( (paramPlusGrand / paramPlusPetit) * param3 )) # Affichage du résultat echo &#34;L&#39;expression ($paramPlusGrand / $paramPlusPetit) * $param3 donne : $resultat&#34;&#xD;Explications : read permet la saisie interactive des valeurs. L’option -p de la commande read dans les scripts Bash permet d’afficher un message avant la saisie de l’utilisateur. Elle sert à guider l’utilisateur en lui indiquant quoi entrer. read -p &#34;Message à afficher : &#34; variable&#xD;-p : Affiche le message spécifié sans retour à la ligne. variable : Stocke la valeur saisie par l’utilisateur. paramPlusGrand et paramPlusPetit sont déterminés avec une condition simple. La division entière est effectuée avec / et l’opérateur * réalise la multiplication. Exemple d’exécution : $ bash param3.sh Entrez le premier nombre : 5 Entrez le deuxième nombre : 10 Entrez le troisième nombre : 3 L&#39;expression (10 / 5) * 3 donne : 6&#xD;Exercice 2 #!/bin/bash # Demande à l&#39;utilisateur d&#39;entrer le chemin du fichier read -p &#34;Entrez le chemin du fichier à vérifier : &#34; fichier # Vérification si le fichier existe if [ -e &#34;$fichier&#34; ] then # Vérification si c&#39;est un fichier standard if [ -f &#34;$fichier&#34; ] then echo &#34;$fichier est un fichier standard.&#34; else echo &#34;$fichier n&#39;est pas un fichier standard.&#34; fi # Vérification des droits d&#39;accès [ -r &#34;$fichier&#34; ] &amp;&amp; echo &#34;lecture : oui&#34; || echo &#34;lecture : non&#34; [ -w &#34;$fichier&#34; ] &amp;&amp; echo &#34;écriture : oui&#34; || echo &#34;écriture : non&#34; [ -x &#34;$fichier&#34; ] &amp;&amp; echo &#34;exécution : oui&#34; || echo &#34;exécution : non&#34; else echo &#34;$fichier n&#39;existe pas.&#34; exit 1 fi&#xD;Explications : -e vérifie si le fichier existe. -f vérifie si c’est un fichier standard. -r, -w, -x vérifient respectivement les droits de lecture, écriture et exécution. Exemple d’exécution : $ bash testFichier.sh Entrez le chemin du fichier à vérifier : /etc/passwd /etc/passwd est un fichier standard. lecture : oui écriture : non exécution : non&#xD;Exercice 3 Partie 1: calcul.sh #!/bin/bash # Vérification qu&#39;il y a 3 paramètres if [ $# -ne 3 ] then exit 1 fi # Vérification de l&#39;opérateur et calcul if [ &#34;$1&#34; = &#34;+&#34; ]; then let &#34;resultat = $2 + $3&#34; elif [ &#34;$1&#34; = &#34;-&#34; ]; then let &#34;resultat = $2 - $3&#34; elif [ &#34;$1&#34; = &#34;^&#34; ]; then let &#34;resultat = $2 ** $3&#34; else echo &#34;Opérateur invalide. Utilisez +, - ou ^.&#34; exit 1 fi # Affichage du résultat echo &#34;$2 $1 $3 = $resultat&#34;&#xD;Exemple d’exécution : $ bash calcul.sh + 4 6 4 + 6 = 10 $ bash calcul.sh - 4 6 4 - 6 = -2 $ bash calcul.sh ^ 4 6 4 ** 6 = 4096&#xD;Partie 2: calculV2.sh #!/bin/bash # Vérification qu&#39;il y a 3 paramètres if [ $# -ne 3 ] then # Demande des paramètres à l&#39;utilisateur read -p &#34;Entrez un opérateur (+, -, ^) : &#34; operateur read -p &#34;Entrez le premier nombre : &#34; nombre1 read -p &#34;Entrez le deuxième nombre : &#34; nombre2 # Affichage du résultat echo &#34;$nombre1 $operateur $nombre2 = $resultat&#34; else # Vérification de l&#39;opérateur et calcul if [ &#34;$1&#34; = &#34;+&#34; ]; then let &#34;resultat = $2 + $3&#34; elif [ &#34;$1&#34; = &#34;-&#34; ]; then let &#34;resultat = $2 - $3&#34; elif [ &#34;$1&#34; = &#34;^&#34; ]; then let &#34;resultat = $2 ** $3&#34; else echo &#34;Opérateur invalide. Utilisez +, - ou ^.&#34; exit 1 fi # Affichage du résultat echo &#34;$2 $1 $3 = $resultat&#34;&#xD;Exemple d’exécution : $ bash calculV2.sh + 4 6 4 + 6 = 10 $ bash calculV2.sh - 4 6 4 - 6 = -2 $ bash calculV2.sh ^ 4 6 4 ^ 6 = 4096 $ bash calculV2.sh Entrez un opérateur (+, -, ^) : + Entrez le premier nombre : 4 Entrez le deuxième nombre : 6 4 + 6 = 10 bash calculV2.sh Entrez un opérateur (+, -, ^) : - Entrez le premier nombre : 4 Entrez le deuxième nombre : 6 4 - 6 = -2 bash calculV2.sh Entrez un opérateur (+, -, ^) : ^ Entrez le premier nombre : 4 Entrez le deuxième nombre : 6 4 ** 6 = 4096</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/solutions/semaine9/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>