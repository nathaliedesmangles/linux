<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Les processus Linux :: 420-ZG4-MO LINUX</title>
    <link>https://example.org/semaine5/index.html</link>
    <description>Plan de la leçon Théorie :&#xA;Qu’est-ce qu’un processus ? Exemples de processus. L’exécution en arrière-plan. Visualiser les processus. Les états des processus. La gestion des processus. Le code de retour des commandes. Les combinaison de commandes. La création de scripts bash. Atelier :&#xA;Gestion et manipulation de processus à l’aide de scripts.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://example.org/semaine5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Les processus de Linux</title>
      <link>https://example.org/semaine5/cours/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/semaine5/cours/index.html</guid>
      <description>Les processus Chaque application, chaque commande est un processus.&#xA;Certains processus vont s’exécuter jusqu’à ce que vous les arrêtiez, d’autres vont réaliser une tâche et s’arrêter tout seul.&#xA;Exemple:&#xA;Commande Comportement ls S’exécute et se termine immédiatement. firefox Ouvre Firefox et reste en exécution empêchant l’utilisation du terminal, jusqu’à la fermeture de Firefox. Quand une commande empêche l’utilisation du terminal pendant son exécution, elle s’exécute au premier plan.&#xA;Pour permettre l’utilisation du terminal, il faut lancer l’application bloquante en arrière-plan.</description>
    </item>
    <item>
      <title>ATELIER #5: Gestion des processus Linux</title>
      <link>https://example.org/semaine5/atelier/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/semaine5/atelier/index.html</guid>
      <description>Objectifs de l’atelier Dans cet atelier, vous allez créer deux versions d’un script Bash :&#xA;Une version séquentielle, où les commandes s’exécutent les unes après les autres. nombre_de_fichiers_seq.sh : Affiche le nombre de fichiers par type. Une version asynchrone, où plusieurs commandes s’exécutent simultanément en arrière-plan. nombre_de_fichiers_conc.sh : Réécriture du script précédent avec des commandes asynchrones (&amp;). Remise Vous devez remettre sur Moodle :&#xA;Vos deux fichiers .sh Deux captures d’écran illustrant le fonctionnement des scripts : Capture Contenu 01_nombre_de_fichiers_seq.png Exécution du script nombre_de_fichiers_seq.sh et résultats 02_nombre_de_fichiers_conc.png Exécution du script nombre_de_fichiers_conc.sh et son résultat Rappels Stocker une valeur dans une variable nb=$(ls | wc -l)&#xD;Cette commande stocke le nombre de fichiers du répertoire courant dans la variable nb.</description>
    </item>
  </channel>
</rss>